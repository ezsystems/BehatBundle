#!/bin/bash
# Examples of use:
#
# for the 1-thread, pure behat tests:
#   bin/ibexabehat --mode=standard --profile=repository-forms --tags=~@broken
#   bin/ibexabehat -m=standard -p=rest -s=fullXml -t=~@broken
#
# for the multi-thread fastest tests:
#   bin/ibexabehat -m=parallel -p=regression -s=demoRegression
#   bin/ibexabehat --profile=adminui --suite=adminui
#
# for getting features list for given profiles/suites:
# use --group-count and --group-offset to split the tests into multiple groups
#   bin/ibexabehat --mode=get-features --profile=repository-forms --tags=~@broken
#   bin/ibexabehat -m=get-features -p=regression -s=demoRegression
#   bin/ibexabehat --mode=get-features --profile=repository-forms --tags=~@broken --group-count=2 --group-offset=0
#   bin/ibexabehat --mode=get-features --profile=repository-forms --tags=~@broken --group-count=2 --group-offset=1


PROFILE=''
SUITE=''
TAGS=''
CONFIG=''
OTHER_OPTIONS=''
MODE='parallel'
STRICT='--strict'
GROUP_COUNT=1
GROUP_OFFSET=0

 # Help command output
usage(){
echo -e "\
Usage:
\t ibexabehat [OPTIONS...]

Options:

\t -m, --mode=MODE; 'get-features', 'standard' or 'parallel' ('parallel' by default);
\t -p, --profile=PROFILE; Behat tests profile;
\t -s, --suite=SUITE; Behat tests suite;
\t -t, --tags=TAGS; Behat tags filter;
\t --non-strict; Run Behat in non-strict mode;
\t --group-count; Split the tests into multiple groups
\t --group-offset; Use together with --group-count, get Scenarios for a group
" | column -t -s ";"
}

 # Error message
error(){
    echo "ibexabehat: invalid option -- '$1'";
    echo "Try 'ibexabehat -h' for more information.";
    exit 1;
}

behat(){
    "$COMPOSER_RUNTIME_BIN_DIR/behat" ${CONFIG} ${PROFILE}${SUITE}${TAGS}--no-interaction -vv ${STRICT} ${OTHER_OPTIONS}
}

fastest(){
    get_behat_features | "$COMPOSER_RUNTIME_BIN_DIR/fastest" -o -v "$COMPOSER_RUNTIME_BIN_DIR/behat {} ${CONFIG} ${PROFILE}${SUITE}${TAGS}--no-interaction -vv ${STRICT} ${OTHER_OPTIONS}"
}

# Fastest option 'list-features' gives us the list of all features from given context in random order, which are later
# run in this order in few threads and dynamically distributed between these threads. That gives us different test build
# times each build, often non optimal. To make this optimal we sort features by the number of scenarios in them
# (descending) and run them in that order, to minimize final time gap between the threads.
get_behat_features(){
     "$COMPOSER_RUNTIME_BIN_DIR/behat" ${CONFIG} ${PROFILE}${SUITE}${TAGS} --list-scenarios | \
     awk '{ gsub(/:[0-9]+/,"",$1); print $1 }' | \
     uniq -c | \
     sort --reverse | \
     awk '{ print $2 }' | \
     awk -v GROUP_COUNT=$GROUP_COUNT -v GROUP_OFFSET=$GROUP_OFFSET 'NR % GROUP_COUNT == GROUP_OFFSET'
}

for i in "$@"
do
case $i in
    -m=*|--mode=*)     MODE="${i#*=}";;
    -p=*|--profile=*)  PROFILE="--profile=${i#*=} "; ;;
    -s=*|--suite=*)    SUITE="--suite=${i#*=} ";;
    -t=*|--tags=*)     TAGS="--tags=${i#*=} ";;
    -c=*|--config=*)   CONFIG="--config=${i#*=}";;
    --non-strict)      STRICT='';;
    --group-count=*)     GROUP_COUNT=${i#*=};;
    --group-offset=*)  GROUP_OFFSET=${i#*=};;
    -h|--help)         usage; exit 1;;
    *)                 OTHER_OPTIONS="${OTHER_OPTIONS} ${i}";;
esac
shift
done

case "${MODE}" in
    behat|standard) behat;;
    fastest|parallel) fastest;;
    get-features) get_behat_features;;
    *) error $MODE
esac
